/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.titan.platform.wizards.newproject;

import java.awt.event.KeyEvent;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.ListModel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.openide.WizardDescriptor;
import org.openide.filesystems.FileUtil;
import org.titan.platform.wizards.components.ImageFileView;
import org.titan.platform.wizards.components.ImageFilter;
import org.titan.platform.wizards.components.ImagePreview;
import static org.titan.platform.utils.Utils.bundle;

public class ConfigurationPanelVisual extends JPanel implements DocumentListener {

    public static final String PROP_PROJECT_NAME = "projectName";
    private ConfigurationWizardPanel panel;

    public ConfigurationPanelVisual(ConfigurationWizardPanel panel) {
        initComponents();
        this.panel = panel;
        // Register listener on the textFields to make the automatic updates
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nameLabel = new javax.swing.JLabel();
        descLabel = new javax.swing.JLabel();
        urlLabel = new javax.swing.JLabel();
        emailLabel = new javax.swing.JLabel();
        loginUrlLabel = new javax.swing.JLabel();
        cacheLabel = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        descField = new javax.swing.JTextField();
        urlField = new javax.swing.JTextField();
        emailField = new javax.swing.JTextField();
        cacheField = new javax.swing.JTextField();
        loginUrlField = new javax.swing.JTextField();
        findButton = new javax.swing.JButton();
        debugModeCheck = new javax.swing.JCheckBox();
        useChatCheck = new javax.swing.JCheckBox();
        onlyFirefoxCheck = new javax.swing.JCheckBox();
        allSectionsCheck = new javax.swing.JCheckBox();
        cacheLabel1 = new javax.swing.JLabel();
        logoPathField = new javax.swing.JTextField();
        findLogoButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        languageList = new javax.swing.JList();
        LinguagemLabel = new javax.swing.JLabel();
        timeZoneLabel = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();

        setPreferredSize(new java.awt.Dimension(551, 315));

        org.openide.awt.Mnemonics.setLocalizedText(nameLabel, bundle(this.getClass(), "label.configuration.name"));

        org.openide.awt.Mnemonics.setLocalizedText(descLabel, bundle(this.getClass(), "label.configuration.description"));

        org.openide.awt.Mnemonics.setLocalizedText(urlLabel, "Url:");

        org.openide.awt.Mnemonics.setLocalizedText(emailLabel, "Email:");

        org.openide.awt.Mnemonics.setLocalizedText(loginUrlLabel, "Login Url:");

        org.openide.awt.Mnemonics.setLocalizedText(cacheLabel, bundle(this.getClass(), "label.configuration.cachePath"));

        urlField.setText("http://localhost:8080");
        urlField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                urlFieldFocusLost(evt);
            }
        });

        cacheField.setText("cache/");

        loginUrlField.setText("http://localhost:8080/titan.php?target=login");

        org.openide.awt.Mnemonics.setLocalizedText(findButton, bundle(this.getClass(), "browse.file"));
        findButton.setActionCommand("BROWSE");
        findButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseCacheButtonActionPerformed(evt);
            }
        });

        debugModeCheck.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(debugModeCheck, bundle(this.getClass(), "label.configuration.debugMode"));

        org.openide.awt.Mnemonics.setLocalizedText(useChatCheck, bundle(this.getClass(), "label.configuration.useChat"));

        org.openide.awt.Mnemonics.setLocalizedText(onlyFirefoxCheck, bundle(this.getClass(), "label.configuration.onlyFirefox"));

        allSectionsCheck.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(allSectionsCheck, bundle(this.getClass(), "label.configuration.allSections"));

        org.openide.awt.Mnemonics.setLocalizedText(cacheLabel1, "Logo:");

        org.openide.awt.Mnemonics.setLocalizedText(findLogoButton, bundle(this.getClass(), "browse.file"));
        findLogoButton.setActionCommand("BROWSE");
        findLogoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileLogoButtonActionPerformed(evt);
            }
        });

        languageList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "pt_BR", "en_US", "es_ES"};
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        languageList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                listaLinguageKeyPressedAction(evt);
            }
        });
        jScrollPane1.setViewportView(languageList);

        org.openide.awt.Mnemonics.setLocalizedText(LinguagemLabel, bundle(this.getClass(), "label.configuration.language"));

        org.openide.awt.Mnemonics.setLocalizedText(timeZoneLabel, "Time Zone:");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(loginUrlLabel)
                            .addComponent(nameLabel)
                            .addComponent(descLabel)
                            .addComponent(urlLabel)
                            .addComponent(emailLabel)
                            .addComponent(cacheLabel)
                            .addComponent(cacheLabel1)
                            .addComponent(LinguagemLabel)
                            .addComponent(timeZoneLabel))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(nameField, javax.swing.GroupLayout.DEFAULT_SIZE, 359, Short.MAX_VALUE)
                                    .addComponent(descField, javax.swing.GroupLayout.DEFAULT_SIZE, 359, Short.MAX_VALUE)
                                    .addComponent(urlField, javax.swing.GroupLayout.DEFAULT_SIZE, 359, Short.MAX_VALUE)
                                    .addComponent(emailField, javax.swing.GroupLayout.DEFAULT_SIZE, 359, Short.MAX_VALUE)
                                    .addComponent(loginUrlField, javax.swing.GroupLayout.DEFAULT_SIZE, 359, Short.MAX_VALUE)
                                    .addComponent(cacheField, javax.swing.GroupLayout.DEFAULT_SIZE, 359, Short.MAX_VALUE)
                                    .addComponent(logoPathField, javax.swing.GroupLayout.DEFAULT_SIZE, 359, Short.MAX_VALUE)
                                    .addComponent(jComboBox1, 0, 359, Short.MAX_VALUE))
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(findLogoButton)
                                    .addComponent(findButton)))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(debugModeCheck)
                        .addGap(4, 4, 4)
                        .addComponent(useChatCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(allSectionsCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(onlyFirefoxCheck)
                        .addGap(23, 23, 23))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel)
                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(descLabel)
                    .addComponent(descField, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(urlLabel)
                    .addComponent(urlField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(emailLabel)
                    .addComponent(emailField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loginUrlLabel)
                    .addComponent(loginUrlField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cacheLabel)
                    .addComponent(cacheField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(findButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cacheLabel1)
                    .addComponent(logoPathField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(findLogoButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(timeZoneLabel)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LinguagemLabel)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(debugModeCheck)
                    .addComponent(useChatCheck)
                    .addComponent(allSectionsCheck)
                    .addComponent(onlyFirefoxCheck))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void browseCacheButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseCacheButtonActionPerformed
        String command = evt.getActionCommand();
        if ("BROWSE".equals(command)) {
            JFileChooser chooser = new JFileChooser();
            FileUtil.preventFileChooserSymlinkTraversal(chooser, null);
            chooser.setDialogTitle(bundle(this.getClass(), "browse.location.cache"));
            chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            String path = this.cacheField.getText();
            if (path.length() > 0) {
                File f = new File(path);
                if (f.exists()) {
                    chooser.setSelectedFile(f);
                }
            }
            if (JFileChooser.APPROVE_OPTION == chooser.showOpenDialog(this)) {
                File projectDir = chooser.getSelectedFile();
                cacheField.setText(FileUtil.normalizeFile(projectDir).getAbsolutePath());
            }
            panel.fireChangeEvent();
        }
    }//GEN-LAST:event_browseCacheButtonActionPerformed

    private void fileLogoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileLogoButtonActionPerformed
       String command = evt.getActionCommand();
        if ("BROWSE".equals(command)) {

            JFileChooser chooser = new JFileChooser();
            chooser.addChoosableFileFilter(new ImageFilter());
            chooser.setAcceptAllFileFilterUsed(false);

	    //Add custom icons for file types.
            chooser.setFileView(new ImageFileView());

	    //Add the preview pane.
            chooser.setAccessory(new ImagePreview(chooser));


//            FileUtil.preventFileChooserSymlinkTraversal(chooser, null);
            chooser.setDialogTitle(bundle(this.getClass(), "browse.location.logo"));
            chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            String path = this.logoPathField.getText();
            if (path.length() > 0) {
                File f = new File(path);
                if (f.exists()) {
                    chooser.setSelectedFile(f);
                }
            }
            if (JFileChooser.APPROVE_OPTION == chooser.showOpenDialog(this)) {
                File projectDir = chooser.getSelectedFile();
                logoPathField.setText(FileUtil.normalizeFile(projectDir).getAbsolutePath());
            }
            panel.fireChangeEvent();
        }
    }//GEN-LAST:event_fileLogoButtonActionPerformed

    private void listaLinguageKeyPressedAction(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_listaLinguageKeyPressedAction
         if (evt.getKeyCode() == KeyEvent.VK_PAGE_UP || evt.getKeyCode() == KeyEvent.VK_PAGE_DOWN || evt.getKeyCode() == KeyEvent.VK_UP || evt.getKeyCode() == KeyEvent.VK_DOWN) {
            //Model JList
            ListModel model = languageList.getModel();

            int numItems = model.getSize();
            int posicao = languageList.getSelectedIndex();
            String[] lista = new String[numItems];

            for (int i = 0; i < numItems; i++) {
                    lista[i] = (String) model.getElementAt(i);
            }

            if (evt.getKeyCode() == KeyEvent.VK_PAGE_UP || evt.getKeyCode() == KeyEvent.VK_UP) {
                if (!(languageList.getSelectedIndex() == 0)) {
                    String aux = lista[posicao - 1];
                    lista[posicao - 1] = lista[posicao];
                    lista[posicao] = aux;

                    languageList.setListData(lista);
                    languageList.setSelectedIndex(posicao - 1);
                    evt.consume();
                }
            }

            if (evt.getKeyCode() == KeyEvent.VK_PAGE_DOWN || evt.getKeyCode() == KeyEvent.VK_DOWN) {
                if (!(languageList.getSelectedIndex() == numItems - 1)) {
                    String aux = lista[posicao + 1];
                    lista[posicao + 1] = lista[posicao];
                    lista[posicao] = aux;

                    languageList.setListData(lista);
                    languageList.setSelectedIndex(posicao + 1);
                    evt.consume();
                }
            }
        }
    }//GEN-LAST:event_listaLinguageKeyPressedAction

    private void urlFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_urlFieldFocusLost
        completeUrlLogin();
    }//GEN-LAST:event_urlFieldFocusLost

    private void completeUrlLogin(){
        if(urlField.getText().trim().length() > 0){
            loginUrlField.setText(urlField.getText().trim()+"/titan.php?target=login");
        }
        else{
               loginUrlField.setText("");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel LinguagemLabel;
    private javax.swing.JCheckBox allSectionsCheck;
    private javax.swing.JTextField cacheField;
    private javax.swing.JLabel cacheLabel;
    private javax.swing.JLabel cacheLabel1;
    private javax.swing.JCheckBox debugModeCheck;
    private javax.swing.JTextField descField;
    private javax.swing.JLabel descLabel;
    private javax.swing.JTextField emailField;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JButton findButton;
    private javax.swing.JButton findLogoButton;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList languageList;
    private javax.swing.JTextField loginUrlField;
    private javax.swing.JLabel loginUrlLabel;
    private javax.swing.JTextField logoPathField;
    private javax.swing.JTextField nameField;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JCheckBox onlyFirefoxCheck;
    private javax.swing.JLabel timeZoneLabel;
    private javax.swing.JTextField urlField;
    private javax.swing.JLabel urlLabel;
    private javax.swing.JCheckBox useChatCheck;
    // End of variables declaration//GEN-END:variables

    @Override
    public void addNotify() {
        super.addNotify();
        //same problem as in 31086, initial focus on Cancel button
    }
    boolean valid(WizardDescriptor wizardDescriptor) {

        wizardDescriptor.putProperty("WizardPanel_errorMessage", "");
        return true;
    }

    @Override
    public void insertUpdate(DocumentEvent e) {
        updateTexts(e);
    }

    @Override
    public void removeUpdate(DocumentEvent e) {
        updateTexts(e);
    }

    @Override
    public void changedUpdate(DocumentEvent e) {
        updateTexts(e);
    }

   private void updateTexts(DocumentEvent e) {
        panel.fireChangeEvent(); // Notify that the panel changed
   }

    void store(WizardDescriptor d) {
        String name = nameField.getText().trim();
        String desc = descField.getText().trim();
        String url = urlField.getText().trim();
        String email = emailField.getText().trim();
        String loginUrl = loginUrlField.getText().trim();
        String cachePath = cacheField.getText().trim();
        String debugMode = "false";
        String useChat = "false";
        String allSections = "false";
        String onlyFirefox = "false";
        String language = "";
        String logoPath = logoPathField.getText().trim();
        String logoNameFile = logoPathField.getText().substring(logoPathField.getText().trim().lastIndexOf(File.separatorChar) + 1);

        if(debugModeCheck.isSelected()){
            debugMode = "true";
        }
        if(useChatCheck.isSelected()){
            useChat = "true";
        }
        if(allSectionsCheck.isSelected()){
            allSections = "true";
        }
        if(onlyFirefoxCheck.isSelected()){
            onlyFirefox = "true";
        }

        ListModel model = languageList.getModel();
        int numItems = model.getSize();

        for (int i = 0; i < numItems; i++) {
            if(i == 0){
                language = (String) model.getElementAt(i);
            }else{
               language = language + ", " + (String) model.getElementAt(i);
            }
        }

        d.putProperty("name", name);
        d.putProperty("desc", desc);
        d.putProperty("url", url);
        d.putProperty("email", email);
        d.putProperty("loginUrl", loginUrl);
        d.putProperty("cachePath", new File(cachePath) + File.separator);
        d.putProperty("debugMode", debugMode);
        d.putProperty("useChat", useChat);
        d.putProperty("allSections", allSections);
        d.putProperty("onlyFirefox", onlyFirefox);
        d.putProperty("language", language);
        d.putProperty("logoPath", logoPath);
        d.putProperty("logoNameFile", logoNameFile);
    }

    void read(WizardDescriptor settings) {
        //
    }
}
